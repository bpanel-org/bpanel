#!/usr/bin/env node --max_old_space_size=4096

const express = require('express');
const path = require('path');
const http = require('http');
const https = require('https');
const fs = require('bfile');
const { createLogger } = require('../server/logger');
const { parseArgs } = require('../server/utils/parseArgs');
const { clientHelpers } = require('../server/utils');
const { buildClients, getClientsById } = clientHelpers;

const bpanelModule = require('../server/index.js');

// Crash the process when a service does
function onError(service, logger) {
  return e => {
    logger.error('%s error: %s', service, e.message);
    process.exit(1);
  };
}

(async function() {
  const logger = createLogger();
  await logger.open();

  try {
    const args = parseArgs({ module: false });

    const config = args.config;
    config.set('logger', logger);

    // handle the unhandled rejections and exceptions
    if (process.listenerCount('unhandledRejection') === 0) {
      process.on('unhandledRejection', err => {
        logger.error('Unhandled Rejection\n', err);
      });
    }
    if (process.listenerCount('uncaughtException') === 0) {
      process.on('uncaughtException', err => {
        logger.error('Uncaught Exception\n', err);
      });
    }

    let protocol;
    let opts = {};

    if (config.bool('ssl', false)) {
      protocol = https;
      logger.info('starting server using https');

      const keyPath = config.str('ssl-key', '/etc/ssl/test_key.pem');
      const certPath = config.str('ssl-cert', '/etc/ssl/test_cert.pem');

      try {
        opts.key = fs.readFileSync(keyPath);
        opts.cert = fs.readFileSync(certPath);
      } catch (e) {
        logger.error(e);
        logger.error('Error reading cert/key pair');
        process.exit(1);
      }
    } else {
      protocol = http;
      logger.info('starting server using http');
    }

    const port = config.int('port', 5000);
    const clientsDir = args.config.location('clients');
    const builtClients = buildClients(config);
    const clients = builtClients.clients;
    const configsMap = builtClients.configsMap;

    const bpanel = await bpanelModule({
      configsMap: configsMap
    });
    const app = bpanel.app;
    const socketManager = bpanel.socketManager;
    await socketManager.open();

    // start the server
    // requires nodejs 10+
    // protocol is either nodejs.http or nodejs.https
    const server = protocol
      .createServer(opts, express().use(app))
      .on('error', onError('bpanel', logger))
      .listen(port, () => {
        logger.info('bpanel app running on port %s', port);
      });

    // emit to socket manager update
    for (const [id, client] of clients) {
      const clientsById = getClientsById(id, clients);
      if (socketManager)
        socketManager.emit('add client', id, clientsById);
    }
  } catch (e) {
    logger.error('There was an error running the server: ', e.stack);
    await logger.close();
    process.exit(1);
  }
})();
